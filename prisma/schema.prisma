generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Comment {
  id              String       @id
  creatorId       String
  communityId     String
  postId          String
  postTitle       String
  text            String
  creatorPhotoURL String
  createdAt       DateTime     @default(now())
  public_users    PublicUser @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  posts           Post        @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Genre {
  id              String            @id
  name            String            @unique
  description     String?
  creatorId       String
  numberOfMembers Int
  privacyType     String            @default("public")
  createdAt       DateTime          @default(now())
  imageURL        String?
  genres_snippets genres_snippets[]
  post_votes      PostVote[]

  @@map("genres")
}

model genres_snippets {
  id           Int           @id @default(autoincrement())
  genreId      String
  userId       String?
  isModerator  Boolean?      @default(false)
  imageURL     String?
  genres       Genre        @relation(fields: [genreId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  public_users PublicUser? @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Label {
  id        String   @id
  name      String   @unique
  color     String
  createdAt DateTime @default(now())

  @@map("labels")
}

model PostVote {
  id           String       @id
  postId       String
  voteValue    Int
  userId       String
  genreId      String
  genres       Genre       @relation(fields: [genreId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  posts        Post       @relation(fields: [postId], references: [id])
  public_users PublicUser @relation(fields: [userId], references: [id])

  @@map("post_votes")
}

model Post {
  id                String       @id
  title             String
  genreId           String
  createdAt         DateTime     @default(now())
  creatorId         String
  editedAt          DateTime     @default(now())
  link              String?
  mediaType         String?
  mediaURL          String?
  numberOfComments  Int          @default(0)
  postIdx           Int?
  voteStatus        Int?
  communityImageURL String?
  description       String
  comments          Comment[]
  post_votes        PostVote[]
  public_users      PublicUser @relation(fields: [creatorId], references: [id])
  
  @@map("posts")
}

model PublicUser {
  id                        String            @id
  nickName                  String
  handler                   String            @unique
  email                     String?           @unique
  emailVerified             DateTime?
  image                     String?
  createdAt                 DateTime          @default(now())
  editedAt                  DateTime          @default(now())
  stripe_customer_id        String?           @unique
  stripe_subscription_id    String?           @unique
  stripe_price_id           String?
  stripe_current_period_end DateTime?
  comments                  Comment[]
  genres_snippets           genres_snippets[]
  post_votes                PostVote[]
  posts                     Post[]

  @@map("public_users")
}

model verification_tokens {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
