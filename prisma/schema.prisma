generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Comment {
  id              String       @id
  creatorId       String
  genreId         String
  postId          String
  text            String
  createdAt       DateTime     @default(now())
  publicUsers     PublicUser   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  posts           Post         @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map(name: "comments")
}

model Genre {
  id              String            @id
  name            String            @unique
  description     String?
  creatorId       String
  numberOfMembers Int
  privacyType     String            @default("public")
  createdAt       DateTime          @default(now())
  imageURL        String?
  genresSnippets  GenreSnippet[]
  PostVote        PostVote[]
  posts           Post[]

  @@map(name: "genres")
}

model GenreSnippet {
  id           Int             @id @default(autoincrement())
  genreId      String 
  userId       String?
  isModerator  Boolean?        @default(false)
  imageURL     String?
  genres       Genre           @relation(fields: [genreId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  publicUsers  PublicUser?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map(name: "genres_snippets")
}

model Label {
  id        String   @id
  name      String   @unique
  color     String
  creatorId String
  createdAt DateTime @default(now())

  postId    String
  post      Post     @relation(fields: [postId], references: [id])

  @@map(name: "labels")
}

model PostVote {
  id           String       @id
  postId       String
  voteValue    Int
  userId       String
  genreId      String
  genres       Genre        @relation(fields: [genreId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  posts        Post         @relation(fields: [postId], references: [id])
  publicUsers  PublicUser   @relation(fields: [userId], references: [id])

  @@map(name: "post_votes")
}

model Post {
  id                String       @id
  title             String
  genreId           String
  createdAt         DateTime     @default(now())
  creatorId         String
  editedAt          DateTime     @default(now())
  link              String?
  mediaType         String?
  mediaURL          String?
  numberOfComments  Int          @default(0)
  postIdx           Int?
  voteStatus        Int?
  coverImageUrl     String?
  description       String
  genre             Genre        @relation(fields: [genreId], references: [id])
  comments          Comment[]
  postVotes         PostVote[]
  publicUsers       PublicUser   @relation(fields: [creatorId], references: [id])
  labels            Label[]

  @@map(name: "posts")
}

model PublicUser {
  id                        String            @id
  nickName                  String
  handler                   String            @unique
  email                     String?           @unique
  emailVerified             DateTime?
  image                     String?
  createdAt                 DateTime          @default(now())
  editedAt                  DateTime          @default(now())
  stripeCustomerId          String?           @unique
  stripeSubscriptionId      String?           @unique
  stripePriceId             String?
  stripeCurrentPeriodEnd    DateTime?
  comments                  Comment[]
  genresSnippets            GenreSnippet[]
  postVotes                 PostVote[]
  posts                     Post[]

  @@map(name: "public_users")
}