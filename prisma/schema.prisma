generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Comment {
  id              String       @id
  creatorId       String
  postId          String
  text            String
  createdAt       DateTime     @default(now())
  publicUsers     PublicUser   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  posts           Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentVotes    CommentVote[]
  voteStatus      Int?         @default(0)  // 추가된 투표 상태 필드

  @@map(name: "comments")
}

model CommentVote {
  id        String     @id @db.VarChar
  commentId String     @db.VarChar
  userId    String     @db.VarChar
  voteValue Int
  createdAt DateTime   @default(now()) @db.Timestamptz(6)
  comment   Comment    @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_comment")
  user      PublicUser @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

  @@map(name: "comment_votes")
}

model Channel {
  id                String            @id(map: "genres_pkey")
  name              String            @unique(map: "genres_name_key")
  description       String?
  creatorId         String
  numberOfMembers   Int
  privacyType       String            @default("public")
  createdAt         DateTime          @default(now())
  imageURL          String?
  channelsSnippets  ChannelSnippet[]
  posts             Post[]

  @@map(name: "channels")
}

model ChannelSnippet {
  id           Int                  @id(map: "genres_snippets_pkey") @default(autoincrement())
  channelId    String 
  userId       String?
  isModerator  Boolean?             @default(false)
  channels     Channel              @relation(fields: [channelId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  publicUsers  PublicUser?          @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "genres_snippets_userId_fkey")

  @@map(name: "channels_snippets")
}

model Label {
  id        String   @id
  name      String   @unique
  color     String
  creatorId String
  createdAt DateTime @default(now())

  postId    String
  post      Post     @relation(fields: [postId], references: [id])

  @@map(name: "labels")
}

model PostVote {
  id           String       @id
  postId       String
  voteValue    Int
  userId       String
  createdAt    DateTime?    @default(now()) @db.Timestamptz(6)
  posts        Post         @relation(fields: [postId], references: [id])
  publicUsers  PublicUser   @relation(fields: [userId], references: [id])

  @@map(name: "post_votes")
}

model Post {
  id                  String       @id
  title               String
  channelId           String
  createdAt           DateTime     @default(now())
  creatorId           String
  editedAt            DateTime     @default(now())
  link                String?
  mediaType           String?
  mediaURL            String?
  numberOfComments    Int          @default(0)
  postIdx             Int?
  voteStatus          Int?
  coverImageUrl       String?
  description         String
  comments            Comment[]
  labels              Label[]
  postVotes           PostVote[]
  channel             Channel      @relation(fields: [channelId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "posts_channelid_fkey")
  publicUsers         PublicUser   @relation(fields: [creatorId], references: [id])

  @@map(name: "posts")
}

model PublicUser {
  id                        String            @id
  nickName                  String
  handler                   String            @unique
  email                     String?           @unique
  emailVerified             DateTime?
  profileImageUrl           String?
  createdAt                 DateTime          @default(now())
  editedAt                  DateTime          @default(now())
  stripeCustomerId          String?           @unique
  stripeSubscriptionId      String?           @unique
  stripePriceId             String?
  stripeCurrentPeriodEnd    DateTime?
  comments                  Comment[]
  channelsSnippets          ChannelSnippet[]
  postVotes                 PostVote[]
  posts                     Post[]
  commentVotes             CommentVote[]

  @@map(name: "public_users")
}
