generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model PublicUser {
  id            String    @id @default(cuid())
  nickName      String 
  handler       String    @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  editedAt      DateTime  @default(now())

  posts    Post[]
  comments Comment[]
  postVotes PostVote[]
  communitySnippets CommunitySnippet[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  @@map(name: "public_users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Label {
  id        String   @id @default(cuid())
  name      String   @unique
  color     String   // 라벨 색상을 나타내는 필드
  createdAt DateTime @default(now())

  posts     Post[]   // Post 모델과의 관계를 나타내는 필드

  @@map(name: "labels")
}

model Post {
  id                String     @id @default(cuid())
  title             String
  description       String
  link              String?    
  numberOfComments  Int        @default(0)
  voteStatus        Int        
  createdAt         DateTime   @default(now())
  editedAt          DateTime   @default(now())
  communityId       String
  communityImageURL String?
  creatorId         String
  mediaType         String?
  mediaURL          String?
  postIdx           Int?
  labels            Label[]

  creator           PublicUser       @relation(fields: [creatorId], references: [id])
  comments          Comment[]
  votes             PostVote[]
  currentUserVotes  PostVote[] @relation("currentUserVotes")

  @@map(name: "posts")
}

model Comment {
  id                String   @id @default(cuid())
  creatorId         String
  communityId       String
  postId            String
  postTitle         String   @db.Text
  text              String
  creatorPhotoURL   String   @db.Text
  createdAt         DateTime @default(now())

  post       Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  creator    PublicUser    @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@map(name: "comments")
}

model Community {
  id              String            @id @default(cuid())
  name            String            @unique
  description     String?
  creatorId       String
  numberOfMembers Int
  privacyType     String            @default("public")
  createdAt       DateTime          @default(now())
  imageURL        String?

  snippets        CommunitySnippet[]
  postVotes       PostVote[]

  @@map(name: "communities")
}

model CommunitySnippet {
  id          Int      @id @default(autoincrement())
  communityId String
  userId      String?  // 사용자 ID 필드 추가
  isModerator Boolean? @default(false)
  imageURL    String?
  community   Community @relation(fields: [communityId], references: [id])
  user        PublicUser?     @relation(fields: [userId], references: [id])

  @@map(name: "communities_snippets")
}

model PostVote {
  id          String   @id @default(cuid())
  postId      String
  voteValue   Int
  userId      String
  communityId String

  post    Post    @relation(fields: [postId], references: [id])
  user    PublicUser    @relation(fields: [userId], references: [id])
  currentUserPost Post? @relation("currentUserVotes", fields: [postId], references: [id], map: "unique_post_votes_postId_fkey")
  community Community @relation(fields: [communityId], references: [id]) 

  @@map(name: "post_votes")
}