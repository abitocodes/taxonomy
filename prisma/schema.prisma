generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = "postgres://postgres.zinpvmxkmnvxkrnxyudv:!Otiba13245678@aws-0-ap-southeast-1.pooler.supabase.com:6543/postgres?pgbouncer=true&connection_limit=1"
  directUrl = "postgres://postgres.zinpvmxkmnvxkrnxyudv:!Otiba13245678@aws-0-ap-southeast-1.pooler.supabase.com:5432"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  editedAt      DateTime  @default(now())

  accounts Account[]
  sessions Session[]
  posts    Post[]
  comments Comment[]
  postVotes PostVote[]
  communitySnippets CommunitySnippet[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Post {
  id                String     @id @default(cuid())
  title             String
  body              String?    // 선택적 필드로 변경
  link              String?    // 선택적 필드로 변경
  numberOfComments  Int        @default(0)
  voteStatus        Int        // 필수 필드로 변경
  createdAt         DateTime   @default(now())
  editedAt          DateTime   @default(now())
  communityId       String
  communityImageURL String?
  authorDisplayText String
  creatorId         String     // 필수 필드로 변경
  mediaType         String?    // 이미 선택적 필드
  mediaURL          String?
  postIdx           Int?       // 이미 선택적 필드

  creator           User       @relation(fields: [creatorId], references: [id]) // 필수 관계로 변경
  comments          Comment[]
  votes             PostVote[]
  currentUserVotes  PostVote[] @relation("currentUserVotes")

  @@map(name: "posts")
}

model Comment {
  id                String   @id @default(cuid())
  creatorId         String
  communityId       String
  postId            String
  postTitle         String   @db.Text
  text              String
  authorDisplayText String  @db.Text
  creatorPhotoURL   String   @db.Text
  createdAt         DateTime @default(now())

  post       Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  creator    User    @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@map(name: "comments")
}

model Community {
  id              String            @id @default(cuid())
  name            String            @unique
  description     String?
  creatorId       String
  numberOfMembers Int
  privacyType     String            @default("public")
  createdAt       DateTime          @default(now())
  imageURL        String?

  snippets        CommunitySnippet[]

  @@map(name: "communities")
}

model CommunitySnippet {
  id          Int      @id @default(autoincrement())
  communityId String
  userId      String?  // 사용자 ID 필드 추가
  isModerator Boolean? @default(false)
  imageURL    String?
  community   Community @relation(fields: [communityId], references: [id])
  user        User?     @relation(fields: [userId], references: [id]) // User 모델과의 관계 추가

  @@map(name: "communities_snippets")
}

model PostVote {
  id        String   @id @default(cuid())
  postId    String
  voteValue Int
  userId    String

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])
  currentUserPost Post? @relation("currentUserVotes", fields: [postId], references: [id], map: "unique_post_votes_postId_fkey")

  @@map(name: "post_votes")
}